package Engine;

import java.util.ArrayList;
import java.util.List;

import Exception.CustomException;
import Parser.Node;
import Parser.Parser;
import lexical_analyzer.LexicalAnalyser;
import lexical_analyzer.Token;

public class Evaluvator {
    public static String evaluvate(String filename){

	      LexicalAnalyser scanner = new LexicalAnalyser(filename);
	      List<Token> tokens;
	      List<Node> AST;   
			try {
				tokens = scanner.scan();

				Parser parser = new Parser(tokens);
				AST=parser.parse();
				
				ArrayList<String> stringAST = parser.convertAST_toStringAST();

				ASTFactory astf =new  ASTFactory();       // create abstract syntax tree factory
		        AST ast = astf.getAbstractSyntaxTree(stringAST);  // get abstract syntax tree from astf using file data
		        
		        ast.standardize();
//		        System.out.println("############ STANDARD AST ###########");
//		        ast.printAst();  // standardize ast
		        CSEMachineFactory csemfac = new CSEMachineFactory();  // create cse machine factory
		        CSEMachine csemachine = csemfac.getCSEMachine(ast);   // get cse machine with cse generated by ast
//		        csemachine.printControl();
//		        csemachine.printStack();
//		        csemachine.printEnvironment();
		       return csemachine.getAnswer();
			} catch (CustomException e) {
				System.out.println(e.getMessage());
			}

        return null;

    

    }
}
